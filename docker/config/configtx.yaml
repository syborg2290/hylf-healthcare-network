# Updated for Fabric 2.x
# policy.1
# Simplified configtx.yaml
Capabilities:
  Application: &ApplicationCapabilities
    V2_0: true
  Orderer: &OrdererCapabilities
    V2_0: true
  Channel: &ChannelCapabilities
    V2_0: true

# ORGANIZATIONS
Organizations:
  - &Orderer
    Name: ordererMSP
    SkipAsForeign: false
    ID: ordererMSP
    MSPDir: ./crypto-config/ordererOrganizations/healthcare.com/msp
    Policies: &OrdererPolicies
      Readers:
          Type: Signature
          Rule: "OR('ordererMSP.member','ordererMSP.admin')"
      Writers:
          Type: Signature
          Rule: "OR('ordererMSP.member','ordererMSP.admin')"
      Admins:
          Type: Signature
          Rule: "OR('ordererMSP.admin')"
      Endorsement:
          Type: Signature
          Rule: "OR('ordererMSP.member','ordererMSP.admin')"

  - &Org1
    Name: bojack
    ID: bojackMSP
    MSPDir: ./crypto-config/peerOrganizations/patient.com/msp
    Policies: &bojackPolicies
      Readers:
          Type: Signature
        #   Rule: "OR('AcmeMSP.admin', 'AcmeMSP.peer', 'AcmeMSP.client')"
          Rule: "OR('bojackMSP.member','bojackMSP.admin')"
      Writers:
          Type: Signature
        #   Rule: "OR('AcmeMSP.admin', 'AcmeMSP.client')"
          Rule: "OR('bojackMSP.member','bojackMSP.admin')"
      Admins:
          Type: Signature
          # UPDATE: Dec 15, 2019 - This is a dev env so its OK in Prod ... use AcmeMSP.admin
          Rule: "OR('bojackMSP.member','bojackMSP.admin')"
      Endorsement:
          Type: Signature
          Rule: "OR('bojackMSP.member','bojackMSP.admin')"
    AnchorPeers:
      - Host: peer0.patient.com
        Port: 7051

  - &Org2
    Name: newlife
    ID: newlifeMSP
    MSPDir: ./crypto-config/peerOrganizations/healthcare.com/msp
    Policies: &newlifePolicies
      Readers:
          Type: Signature
        #   Rule: "OR('AcmeMSP.admin', 'AcmeMSP.peer', 'AcmeMSP.client')"
          Rule: "OR('newlifeMSP.member','newlifeMSP.admin')"
      Writers:
          Type: Signature
        #   Rule: "OR('AcmeMSP.admin', 'AcmeMSP.client')"
          Rule: "OR('newlifeMSP.member','newlifeMSP.admin')"
      Admins:
          Type: Signature
          # UPDATE: Dec 15, 2019 - This is a dev env so its OK in Prod ... use AcmeMSP.admin
          Rule: "OR('newlifeMSP.member','newlifeMSP.admin')"
      Endorsement:
          Type: Signature
          Rule: "OR('newlifeMSP.member','newlifeMSP.admin')"
    AnchorPeers:
      - Host: peer0.healthcare.com
        Port: 7051

  - &Org3
    Name: goodlife
    ID: goodlifeMSP
    MSPDir: ./crypto-config/peerOrganizations/insurance.com/msp
    Policies: &goodlifePolicies
      Readers:
          Type: Signature
        #   Rule: "OR('AcmeMSP.admin', 'AcmeMSP.peer', 'AcmeMSP.client')"
          Rule: "OR('goodlifeMSP.member','goodlifeMSP.admin')"
      Writers:
          Type: Signature
        #   Rule: "OR('AcmeMSP.admin', 'AcmeMSP.client')"
          Rule: "OR('goodlifeMSP.member','goodlifeMSP.admin')"
      Admins:
          Type: Signature
          # UPDATE: Dec 15, 2019 - This is a dev env so its OK in Prod ... use AcmeMSP.admin
          Rule: "OR('goodlifeMSP.member','goodlifeMSP.admin')"
      Endorsement:
          Type: Signature
          Rule: "OR('goodlifeMSP.member','goodlifeMSP.admin')"
    AnchorPeers:
      - Host: peer0.insurance.com
        Port: 7051

  - &Org4
    Name: lifemedicine
    ID: lifemedicineMSP
    MSPDir: ./crypto-config/peerOrganizations/epharma.com/msp
    Policies: &lifemedicinePolicies
      Readers:
          Type: Signature
        #   Rule: "OR('AcmeMSP.admin', 'AcmeMSP.peer', 'AcmeMSP.client')"
          Rule: "OR('lifemedicineMSP.member','lifemedicineMSP.admin')"
      Writers:
          Type: Signature
        #   Rule: "OR('AcmeMSP.admin', 'AcmeMSP.client')"
          Rule: "OR('lifemedicineMSP.member','lifemedicineMSP.admin')"
      Admins:
          Type: Signature
          # UPDATE: Dec 15, 2019 - This is a dev env so its OK in Prod ... use AcmeMSP.admin
          Rule: "OR('lifemedicineMSP.member','lifemedicineMSP.admin')"
      Endorsement:
          Type: Signature
          Rule: "OR('lifemedicineMSP.member','lifemedicineMSP.admin')"
    AnchorPeers:
      - Host: peer0.epharma.com
        Port: 7051


  
#   ORDERER
Orderer: &OrdererDefaults

  OrdererType: etcdraft

  Addresses:
    - orderer.healthcare.com:7050
    - orderer2.healthcare.com:7050
    - orderer3.healthcare.com:7050
    - orderer4.healthcare.com:7050
    - orderer5.healthcare.com:7050

  # Policies for Orderer
  Policies:
    Readers:
        Type: ImplicitMeta
        Rule: "ANY Readers"
    Writers:
        Type: ImplicitMeta
        Rule: "ANY Writers"
    Admins:
        Type: ImplicitMeta  
        # UPDATED December 15, 2019
        Rule: "ANY Admins"
        # Rule: "MAJORITY Admins"

    # BlockValidation specifies what signatures must be included in the block
    # from the orderer for the peer to validate it.
    BlockValidation:
        Type: ImplicitMeta
        Rule: "ANY Writers"

  
  EtcdRaft:
      # The set of Raft replicas for this network. For the etcd/raft-based
      # implementation, we expect every replica to also be an OSN. Therefore,
      # a subset of the host:port items enumerated in this list should be
      # replicated under the Orderer.Addresses key above.
      Consenters:
          - Host: orderer.healthcare.com
            Port: 7050
            # Same cert is being used for client and server - for higher level of security you may use different certs
            ClientTLSCert: ../config/crypto-config/ordererOrganizations/healthcare.com/orderers/orderer.healthcare.com/tls/server.crt
            ServerTLSCert: ../config/crypto-config/ordererOrganizations/healthcare.com/orderers/orderer.healthcare.com/tls/server.crt

          - Host: orderer2.healthcare.com
            Port: 7050
            ClientTLSCert: ../config/crypto-config/ordererOrganizations/healthcare.com/orderers/orderer2.healthcare.com/tls/server.crt
            ServerTLSCert: ../config/crypto-config/ordererOrganizations/healthcare.com/orderers/orderer2.healthcare.com/tls/server.crt

          - Host: orderer3.healthcare.com
            Port: 7050
            ClientTLSCert: ../config/crypto-config/ordererOrganizations/healthcare.com/orderers/orderer3.healthcare.com/tls/server.crt
            ServerTLSCert: ../config/crypto-config/ordererOrganizations/healthcare.com/orderers/orderer3.healthcare.com/tls/server.crt

          # Additional Orderers go here
          - Host: orderer4.healthcare.com
            Port: 7050
            ClientTLSCert: ../config/crypto-config/ordererOrganizations/healthcare.com/orderers/orderer4.healthcare.com/tls/server.crt
            ServerTLSCert: ../config/crypto-config/ordererOrganizations/healthcare.com/orderers/orderer4.healthcare.com/tls/server.crt
            
          - Host: orderer5.healthcare.com
            Port: 7050
            ClientTLSCert: ../config/crypto-config/ordererOrganizations/healthcare.com/orderers/orderer5.healthcare.com/tls/server.crt
            ServerTLSCert: ../config/crypto-config/ordererOrganizations/healthcare.com/orderers/orderer5.healthcare.com/tls/server.crt
      # Options to be specified for all the etcd/raft nodes. The values here
      # are the defaults for all new channels and can be modified on a
      # per-channel basis via configuration updates.
      Options:
          # TickInterval is the time interval between two Node.Tick invocations.
          TickInterval: 500ms

          # ElectionTick is the number of Node.Tick invocations that must pass
          # between elections. That is, if a follower does not receive any
          # message from the leader of current term before ElectionTick has
          # elapsed, it will become candidate and start an election.
          # ElectionTick must be greater than HeartbeatTick.
          ElectionTick: 10

          # HeartbeatTick is the number of Node.Tick invocations that must
          # pass between heartbeats. That is, a leader sends heartbeat
          # messages to maintain its leadership every HeartbeatTick ticks.
          HeartbeatTick: 1

          # MaxInflightBlocks limits the max number of in-flight append messages
          # during optimistic replication phase.
          MaxInflightBlocks: 5

          # SnapshotIntervalSize defines number of bytes per which a snapshot is taken
          SnapshotIntervalSize: 20 MB
  # Batch Timeout: The amount of time to wait before creating a batch
  BatchTimeout: 2s

  # Batch Size: Controls the number of messages batched into a block
  BatchSize:
    MaxMessageCount: 10
    AbsoluteMaxBytes: 98 MB
    PreferredMaxBytes: 512 KB

  Capabilities:
    <<: *OrdererCapabilities

Application: &ApplicationDefaults

  ACLs: &ACLsDefault
    
    # ACL policy for lscc's "getid" function
    lscc/ChaincodeExists: /Channel/Application/Readers

    # ACL policy for lscc's "getdepspec" function
    lscc/GetDeploymentSpec: /Channel/Application/Readers

    # ACL policy for lscc's "getccdata" function
    lscc/GetChaincodeData: /Channel/Application/Readers

    # ACL Policy for lscc's "getchaincodes" function
    lscc/GetInstantiatedChaincodes: /Channel/Application/Readers
    

    #---Query System Chaincode (qscc) function to policy mapping for access control---#

    # ACL policy for qscc's "GetChainInfo" function
    qscc/GetChainInfo: /Channel/Application/Readers
    

    # ACL policy for qscc's "GetBlockByNumber" function
    qscc/GetBlockByNumber: /Channel/Application/Readers

    # ACL policy for qscc's  "GetBlockByHash" function
    qscc/GetBlockByHash: /Channel/Application/Readers

    # ACL policy for qscc's "GetTransactionByID" function
    qscc/GetTransactionByID: /Channel/Application/Readers

    # ACL policy for qscc's "GetBlockByTxID" function
    qscc/GetBlockByTxID: /Channel/Application/Readers

    #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

    # ACL policy for cscc's "GetConfigBlock" function
    cscc/GetConfigBlock: /Channel/Application/Readers

    # ACL policy for cscc's "GetConfigTree" function
    cscc/GetConfigTree: /Channel/Application/Readers

    # ACL policy for cscc's "SimulateConfigTreeUpdate" function
    cscc/SimulateConfigTreeUpdate: /Channel/Application/Readers

    #---Miscellanesous peer function to policy mapping for access control---#

    # ACL policy for invoking chaincodes on peer
    peer/Propose: /Channel/Application/Writers

    # ACL policy for chaincode to chaincode invocation
    peer/ChaincodeToChaincode: /Channel/Application/Readers

    #---Events resource to policy mapping for access control###---#

    # ACL policy for sending block events
    event/Block: /Channel/Application/Readers

    # ACL policy for sending filtered block events
    event/FilteredBlock: /Channel/Application/Readers

    # Chaincode Lifecycle Policies introduced in Fabric 2.x
    # ACL policy for _lifecycle's "CheckCommitReadiness" function
    _lifecycle/CheckCommitReadiness: /Channel/Application/Writers

    # ACL policy for _lifecycle's "CommitChaincodeDefinition" function
    _lifecycle/CommitChaincodeDefinition: /Channel/Application/Writers

    # ACL policy for _lifecycle's "QueryChaincodeDefinition" function
    _lifecycle/QueryChaincodeDefinition: /Channel/Application/Readers
    

  # Default policies
  Policies: &ApplicationDefaultPolicies

    # approveformyorg
    LifecycleEndorsement:
        Type: ImplicitMeta
        # Rule: "MAJORITY Endorsement"
        Rule: "ANY Endorsement"
    
    # --channel-config-policy
    Endorsement:
        Type: ImplicitMeta
        Rule: "MAJORITY Endorsement"
    Readers:
        Type: ImplicitMeta
        Rule: "ANY Readers"
    Writers:
        Type: ImplicitMeta
        Rule: "ANY Writers"
    Admins:
        Type: ImplicitMeta
        Rule: "MAJORITY Admins"


  Organizations:

  Capabilities:
    <<: *ApplicationCapabilities
     
 

#   CHANNEL
Channel: &ChannelDefaults
  Policies:
    Readers:
        Type: ImplicitMeta
        Rule: "ANY Readers"
    Writers:
        Type: ImplicitMeta
        Rule: "ANY Writers"
    Admins:
        Type: ImplicitMeta
        Rule: "MAJORITY Admins"

  Capabilities:
    <<: *ChannelCapabilities

 
#   PROFILES
Profiles:

  HealthcareOrdererGenesis:
      <<: *ChannelDefaults
      Orderer:
          <<: *OrdererDefaults
          Organizations:
              - <<: *Orderer
      Consortiums:
        HealthcareConsortium:   
            Organizations:
                  - <<: *Org1
                  - <<: *Org2
                  - <<: *Org3
                  - <<: *Org4

      Application:
            <<: *ApplicationDefaults

            Organizations:
                - <<: *Org1
                - <<: *Org2
                - <<: *Org3
                - <<: *Org4


                  
  HealthcareChannel:
    <<: *ChannelDefaults
    Consortium: HealthcareConsortium
        
    Application:
        <<: *ApplicationDefaults
        
        Organizations:
            - <<: *Org1
            - <<: *Org2
            - <<: *Org3
            - <<: *Org4

          

          



